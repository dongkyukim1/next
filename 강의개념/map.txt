🍎 1. 기본 배열과 JSX 출력하기

let 상품 = ['apple', 'banana', 'orange'];

export default function ProductsPage() {
  return (
    <div className="container mx-auto p-4">
      <h4 className="title">상품 목록</h4>

      <div className="food">
        <h4>{상품[0]} $40</h4>
      </div>
      <div className="food">
        <h4>{상품[1]} $40</h4>
      </div>
      <div className="food">
        <h4>{상품[2]} $40</h4>
      </div>
    </div>
  );
}
배열(상품)에서 원하는 항목을 JSX 안에서 {}로 출력할 수 있습니다.
🍊 2. 상품이 많으면 어떻게? → .map()
상품이 1000개일 때 일일이 적기 힘들다면?

이때 사용하는 함수가 바로 JavaScript의 .map()입니다!
🔸 기본 구조

let 어레이 = [2, 3, 4];

// 화살표 함수 사용
어레이.map((요소, 인덱스) => {
  console.log(요소); // 배열의 요소 하나하나를 출력
});

2
3
4
여기서 인덱스(i)는 0, 1, 2처럼 배열의 각 요소의 순서를 나타냅니다.
🔸 기존 방식과의 비교
아래 두 방식은 똑같은 기능을 수행합니다.


// 화살표 함수
어레이.map(() => {

});

// 일반 함수
어레이.map(function() {

});
🍌 3. Next.js에서의 실제 활용 예시
위의 배열과 .map() 개념을 실제로 적용한 Next.js 페이지 예시입니다.

jsx
복사
편집
let 상품 = ['apple', 'banana', 'orange'];

export default function ProductsPage() {
  return (
    <div className="container mx-auto p-4">
      <h4 className="title">상품 목록</h4>

      {상품.map((이름, i) => (
        <div className="food" key={i}>
          <h4>{이름} $40</h4>
        </div>
      ))}
    </div>
  );
}
📌 설명
상품.map()을 사용하여 반복되는 코드를 깔끔하게 줄입니다.
각각의 상품을 자동으로 출력하고, 새로운 상품을 배열에 추가할 때 코드 수정 없이 자동으로 출력됩니다.
반드시 key 속성을 넣어야 성능에 좋습니다.
🍉 4. 결론 및 요약
.map() 함수는 배열의 길이만큼 자동으로 반복해서 JSX를 출력할 때 사용합니다.
배열 요소는 첫 번째 인자(요소)로 받습니다.
배열 요소의 위치는 두 번째 인자(인덱스)로 받을 수 있습니다.
JSX를 반환할 때는 괄호로 감싸서 암시적 반환(implicit return)을 자주 사용합니다.
